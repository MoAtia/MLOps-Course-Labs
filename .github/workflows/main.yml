name: Python CI

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: churn-prediction
  TAG: Atia2000  

jobs:
  ci-build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt

    - name: Run tests with pytest
      run: |
        cd app
        pytest test_main.py

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.TAG }} .

    - name: Tag and Push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker tag $IMAGE_NAME:${{ env.TAG }} $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
        docker push $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
        echo "ECR_IMAGE=$ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}" >> $GITHUB_ENV

    - name: Write SSH key to file
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem

    - name: Deploy app to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          echo "✅ Logged into EC2"

          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 060795916912.dkr.ecr.us-east-1.amazonaws.com
          echo "✅ Logged into ECR"

          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          echo "✅ Pulled image from ECR"

          # docker rm -f my-app || true

          docker run -d --name my-app -p 443:8000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ env.TAG }}
        EOF
