name: Python CI

on:
  push:
    branches: [ main ]
env:
  AWS_REGION: us-east-1
  IMAGE_NAME: churn-prediction
  TAG: Atia2000  


jobs:
  build and deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
    
    - name: Run tests with pytest
      run: |
        cd app
        pytest test_main.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()  # Only upload if tests pass






    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3


    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.TAG }} .

    - name: Tag and Push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker tag $IMAGE_NAME:${{ env.TAG }} $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
        docker push $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
        echo "ECR_IMAGE=$ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}" >> $GITHUB_ENV


    # - name: Output image URI
    #   run: |
    #     echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"


    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}


    - name: Write SSH private key to file
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem



    - name: Deploy app to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

      run: |
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
        echo "✅ Logged into EC2"


        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCESS_KEY_ID }}.dkr.ecr.us-east-1.amazonaws.com
        echo "✅ Logged into ECR"

        
        # Pull image
        docker pull $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
        echo "✅ Pulled image from ECR"

        # Stop and remove existing container (if exists)
        # docker rm -f my-app || true

        # Run the container
        docker run -d --name my-app -p 443:8000 060795916912.dkr.ecr.us-east-1.amazonaws.com/:c27e94500ecdbaea5cb0d6780a5186c558ad38f4

        EOF
