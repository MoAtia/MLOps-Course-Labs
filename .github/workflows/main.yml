name: Python CI

on:
  push:
    branches: [ main ]
env:
  AWS_REGION: us-east-1
  IMAGE_NAME: churn-prediction
  TAG: Atia2000  


jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
    
    - name: Run tests with pytest
      run: |
        cd app
        pytest test_main.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()  # Only upload if tests pass






  Build-image-and-push-to-ECR:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3


    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.TAG }} .

    - name: Tag and Push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker tag $IMAGE_NAME:${{ env.TAG }} $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
        docker push $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
        echo "ECR_IMAGE=$ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}" >> $GITHUB_ENV

    # - name: Build Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     push: true
    #     tags: |
    #       ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
    #       ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:Atia
    #     build-args: |
    #       PYTHON_VERSION=3.12

    - name: Output image URI
      run: |
        echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"






  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}


      - name: Write SSH private key to file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Deploy app to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'


            # Pull latest image from ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            # Navigate to your app directory
            cd /home/ubuntu/app

            # Pull updated images (if using prebuilt image) and deploy
            # docker-compose pull
            docker compose -f docker-compose.yml up -d
          EOF
